{"name":"Decker","tagline":"Interactive slide decks","body":"# Decker\r\nMake HTML5 presentations that users can follow along and interact with from their mobile devices. Two-way interactions allow your presentation to both send content to the audience and receive responses from them.\r\n\r\n## What?\r\nHere, just watch this 2 minute video.\r\n\r\n\r\n## Disclaimer\r\nRight now it's too soon to call this a library or anything, it's just a single afternoon hack I made to learn WebSockets. I'm putting it out there to gauge interest - if you'd like to help work on it, get in touch!\r\n\r\n## What can I do with it?\r\nWell, right now it's in the afternoon hackathon/proof-of-concept stage, but here's where I'm looking to go:\r\n\r\n* Let the audience follow the presentation on their mobile device\r\n* Show polls to users and update data visualizations in the presentation in real-time based on responses\r\n* Send extra content to mobile devices (e.g. the deck translated into another language, information tailored to each user, etc)\r\n* Allow users to login with e.g. Twitter to add content directly into presentation\r\n\r\n## How does it work?\r\nThrough [WebSockets](http://www.html5rocks.com/en/tutorials/websockets/basics/)! These cool little pieces of javascript magic allows for instantaneous and continuous communication between the presentation and the audience.\r\n\r\n### Implementation\r\nSpecifically, this proof-of-concept uses several libraries, each of which could be swapped out given a little more time:\r\n\r\n* [Ruby on Rails](http://rubyonrails.org/) - Rails is great for quickly knocking out a prototype, but it's overkill for this project seeing as it doesn't need an entire MVC framework. Moving to node.js probably makes the most sense.\r\n* [WebSocket-Rails](https://github.com/websocket-rails/websocket-rails) - a quick and easy way to get a WebSocket server up and running, but probably overkill.\r\n* [stack.js](https://github.com/mbostock/stack) - a little library by Mike Bostock for quickly building a slide deck. We've modified it a bit to allow for custom events, but we'll probably move to [Reveal.js](https://github.com/hakimel/reveal.js) instead to allow for more control.\r\n* The slides in the demo use [d3js](https://github.com/mbostock/d3), [TopoJSON](https://github.com/mbostock/topojson) (both also by Mike Bostock - man, that guy does everything!), and [Google Maps Javascript API](https://developers.google.com/maps/documentation/javascript/) but that's just for slide content.\r\n\r\n## Is there a demo?\r\nJust clone this repo and run `rails s`! The following urls should then be active:\r\n\r\n* [http://localhost:3000/presenter](http://localhost:3000/presenter) - this is the main slide deck\r\n* [http://localhost:3000/audience](http://localhost:3000/audience) - this is the audience's view\r\n* [http://localhost:3000/electric-sheep](http://localhost:3000/electric-sheep) - control \"replicants\" to test out what the deck will be like with a large audience!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}